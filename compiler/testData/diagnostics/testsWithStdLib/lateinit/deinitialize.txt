package

public fun onNonAccessible(): kotlin.Unit

public interface Base {
    public abstract var x: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public open class Foo : Base {
    public constructor Foo()
    public final var nonLateInit: kotlin.Int
    public open override /*1*/ lateinit var x: kotlin.String
    private final lateinit var y: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final inline fun inlineFun(): kotlin.Unit
    public final fun ok(): kotlin.Unit
    public final fun onLiteral(): kotlin.Unit
    public final fun onNonLateinit(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
